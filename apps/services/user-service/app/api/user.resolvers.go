package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"aetherium.com/user-service/app/api/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	createdDbUser, err := r.Resolver.SignUpService.CreateUser(ctx, input.Email, input.Password)
	if err != nil {
		return nil, fmt.Errorf("user signup failed: %w", err)
	}

	// THIS IS THE FIX: We use 'model.User' because the package is named 'model'.
	apiUser := &model.User{
		ID:        createdDbUser.ID.String(),
		Email:     createdDbUser.Email,
		Role:      createdDbUser.Role,
		CreatedAt: createdDbUser.CreatedAt.Time.String(),
		UpdatedAt: createdDbUser.UpdatedAt.Time.String(),
	}

	return apiUser, nil
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	return "OK", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
